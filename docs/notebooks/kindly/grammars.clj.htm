<!DOCTYPE html>
<html><head><script src="https://unpkg.com/react@18/umd/react.production.min.js" type="text/javascript"></script><script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.reagent.js" type="text/javascript"></script><script src="https://cdn.jsdelivr.net/npm/vega@5" type="text/javascript"></script><script src="https://cdn.jsdelivr.net/npm/vega-lite@5" type="text/javascript"></script><script src="https://cdn.jsdelivr.net/npm/vega-embed@6" type="text/javascript"></script><script src="portal-main.js" type="text/javascript"></script></head><body><script type="application/x-scittle">(ns main
  (:require [reagent.core :as r]
            [reagent.dom :as dom]))</script><div><pre><code>(ns kindly.grammars
  (:require [clojure.java.io :as io]
            [malli.core :as ma])
  (:import (javax.imageio ImageIO)))</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]")}
                , document.currentScript.parentElement);</script></div></div><div># Kindly grammars
</div><div>Notebooks and rich REPLs visualize data and objects.
Kindly seeks to establish a standard way for users to request visualizations.
</div><div>Nesting is an important consideration.
For example a table might contain an image in a cell.
</div><div>## HTML (hiccup)
</div><div>HTML is the most flexible visualization,
as you can represent pretty much anything that can display in a browser.
</div><div><pre><code>(def hiccup-table
  ^:kindly/hiccup
  [:table
   [:tr [:td 1] [:td 2]]
   [:tr [:td 3] [:td 4]]])</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name hiccup-table, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/hiccup-table]]")}
                , document.currentScript.parentElement);</script></div></div><div>The downside of HTML is that users need to expend considerable effort reshaping their data into views.
</div><div>Hiccup has a Malli schema that can be used to validate and parse:
</div><div><pre><code>(def Hiccup
  [:schema {:registry {"hiccup" [:orn
                                 [:node [:catn
                                         [:name keyword?]
                                         [:props [:? [:map-of keyword? any?]]]
                                         [:children [:* [:schema [:ref "hiccup"]]]]]]
                                 [:primitive [:orn
                                              [:nil nil?]
                                              [:boolean boolean?]
                                              [:number number?]
                                              [:text string?]]]]}}
   "hiccup"])</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name Hiccup, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/Hiccup]]")}
                , document.currentScript.parentElement);</script></div></div><div>Hiccup does not check for the creation of valid HTML; tags and attributes are not checked.
</div><div><pre><code>(def parse-hiccup (ma/parser Hiccup))</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name parse-hiccup, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/parse-hiccup]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>(parse-hiccup hiccup-table)</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :table]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :tr]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]]]]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]]]]]}]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :tr]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]]]]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 4]]]]]}]]}]]}]")}
                , document.currentScript.parentElement);</script></div></div><div>## Tables
</div><div>Tables are interesting because one can imagine users with data in many different shapes;
vectors of vectors, vectors of maps, Tablecloth datasets, or maybe something else.
</div><div><pre><code>^:kind/table
{:headers     []
 :row-vectors []}</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} {:headers [], :row-vectors []}]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>^:kind/table
{:headers     []
 :row-maps []}</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} {:row-maps [], :headers []}]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>^:kind/table
[[1 2]
 [3 4]]</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} [[1 2] [3 4]]]]")}
                , document.currentScript.parentElement);</script></div></div><div>It would be convenient to allow users several options for table inputs,
and some transformations to standardize them for downstream tools.
Perhaps this can be achieved with a shorthand helper?
</div><div><pre><code>'(tabulate values)</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "(^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector tabulate]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector values]])")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>'(tabulate headers values)</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "(^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector tabulate]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector headers]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector values]])")}
                , document.currentScript.parentElement);</script></div></div><div>Possibly a multimethod (with a row multimethod as well).
</div><div>Tools should be encouraged to accept a standardized data shape defined by a schema:
</div><div><pre><code>(def Table
  [:schema {:registry {"table" ['...]}}
   "table"])</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name Table, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/Table]]")}
                , document.currentScript.parentElement);</script></div></div><div>## Plots
</div><div>Plots have the richest grammar.
Two popular grammars for plotting are Vega and ggplot2.
</div><div><pre><code>(defn vega-lite-point-plot [data]
  ^:kind/vega-lite
  {:data {:values data},
   :mark "point"
   :encoding
   {:size {:field "w" :type "quantitative"}
    :x    {:field "x", :type "quantitative"},
    :y    {:field "y", :type "quantitative"},
    :fill {:field "z", :type "nominal"}}})</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:arglists ([data]), :line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name vega-lite-point-plot, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/vega-lite-point-plot]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>(defn random-data [n]
  (->> (repeatedly n #(- (rand) 0.5))
       (reductions +)
       (map-indexed (fn [x y]
                      {:w (rand-int 9)
                       :z (rand-int 9)
                       :x x
                       :y y}))))</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:arglists ([n]), :line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name random-data, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/random-data]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>(defn random-vega-lite-plot [n]
  (-> n
      random-data
      vega-lite-point-plot))</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:arglists ([n]), :line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init7061726597439344785.clj\", :name random-vega-lite-plot, :ns #object[clojure.lang.Namespace 0x7ce214dc \"kindly.grammars\"]} #'kindly.grammars/random-vega-lite-plot]]")}
                , document.currentScript.parentElement);</script></div></div><div><pre><code>^:kind/vega-lite
(random-vega-lite-plot 9)</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:portal.viewer/vega-lite ^#:kind{:vega-lite true} {:encoding {:y {:field \"y\", :type \"quantitative\"}, :fill {:field \"z\", :type \"nominal\"}, :size {:field \"w\", :type \"quantitative\"}, :x {:field \"x\", :type \"quantitative\"}}, :mark \"point\", :data {:values ({:y 0.1928835177440794, :w 4, :z 2, :x 0} {:y 0.6307190452411674, :w 0, :z 3, :x 1} {:y 1.1166012093596054, :w 3, :z 5, :x 2} {:y 1.078364176516005, :w 2, :z 8, :x 3} {:y 0.6639055121923864, :w 0, :z 3, :x 4} {:y 0.19993739076167993, :w 4, :z 1, :x 5} {:y -0.1620654923385697, :w 2, :z 0, :x 6} {:y 0.1379622812865754, :w 5, :z 3, :x 7} {:y 0.5335090060449843, :w 4, :z 7, :x 8})}}]")}
                , document.currentScript.parentElement);</script></div></div><div>Vega has json-schemas available which are comprehensive.
There is not yet a way to create Malli schemas from Vega json-schema.
We could use a json-schema library instead,
or improve Malli schema conversion.
</div><div>## Images
</div><div>No grammar is necessary for images.
</div><div>Images can be specified using Markdown syntax:

    ![a heart](claykind.png)

![a heart](../../../claykind.png)

Managing the path to images can be challenging for users.
</div><div>It is nice to be able to use "send form to Portal" or similar, can this be done with Markdown?
</div><div><pre><code>(ImageIO/read (io/file "claykind.png"))</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "#object[\"[B\" 0x478a5a01 \"[B@478a5a01\"]")}
                , document.currentScript.parentElement);</script></div></div><div>Users may benefit from a shorthand helper function `(image "claykind.png")`.
</div><div>sometimes the filename will be calculated programmatically,
which would be teadious to achieve with markdown.
</div><div>## Reagent components
</div><div>A grammar is not possible for functions, or Reagent components.
</div><div>## Tablecloth datasets
</div><div>Tablecloth datasets are identifiable by their type.
</div><div>## Markdown
</div><div>Markdown comes in different flavours,
for example GitHub Markdown and Quarto (qmd).
Downstream tools may benefit from a hint as to which flavor should be used.
Users probably don't want to have to think too much about this though.
</div><div>Of particular interest is the display of mathematical equations,
which often require plugin support.
</div><div>$ f(x) = x^2 $
</div><div>Should render as an equation.
</div><div>Somewhat surprisingly, we cannot rely entirely on comments to represent Markdown.
We might need to construct Markdown programmatically.
</div><div><pre><code>^:kindly/markdown
(str "## This... is... " :Markdown)</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector \"## This... is... :Markdown\"]]")}
                , document.currentScript.parentElement);</script></div></div><div>## Data
</div><div>No grammar is necessary for primitives and collections.
</div><div><pre><code>{:this #{"is"}
 'data [1 2 3 nil]}</code></pre><div><script>portal.extensions.vs_code_notebook.activate().renderOutputItem(
                {"mime": "x-application/edn",
                 "text": (() => "{^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :this]] #{^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector \"is\"]]}, ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector data]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]]}")}
                , document.currentScript.parentElement);</script></div></div><div>One challenge is when the data is very large.
Ideally some preview would be available.
</div></body></html>