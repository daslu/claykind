<!DOCTYPE html>
<html><head><script src="https://unpkg.com/react@18/umd/react.production.min.js" type="text/javascript"></script><script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.reagent.js" type="text/javascript"></script><script src="http://localhost:59822/main.js?59830789-0bfa-4d3f-a49c-14390e78312b" type="text/javascript"></script></head><body><script type="application/x-scittle">(ns main (:require [reagent.core :as r] [reagent.dom :as dom] [emmy-viewers.sci]))
(emmy-viewers.sci/install!)</script><div id="widget0"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]"}]) (.getElementById js/document "widget0"))</script><div># Kindly grammars
</div><div>Notebooks and rich REPLs visualize data and objects.
Kindly seeks to establish a standard way for users to request visualizations.
</div><div>Nesting is an important consideration.
For example a table might contain an image in a cell.
</div><div>## HTML (hiccup)
</div><div>HTML is the most flexible visualization,
as you can represent pretty much anything that can display in a browser.
</div><div id="widget6"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name hiccup-table, :ns #object[clojure.lang.Namespace 0x4a9b9e41 \"kindly.grammars\"]} #'kindly.grammars/hiccup-table]]"}]) (.getElementById js/document "widget6"))</script><div>The downside of HTML is that users need to expend considerable effort reshaping their data into views.
</div><div>Hiccup has a Malli schema that can be used to validate and parse:
</div><div id="widget9"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name Hiccup, :ns #object[clojure.lang.Namespace 0x4a9b9e41 \"kindly.grammars\"]} #'kindly.grammars/Hiccup]]"}]) (.getElementById js/document "widget9"))</script><div>Hiccup does not check for the creation of valid HTML; tags and attributes are not checked.
</div><div id="widget11"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name parse-hiccup, :ns #object[clojure.lang.Namespace 0x4a9b9e41 \"kindly.grammars\"]} #'kindly.grammars/parse-hiccup]]"}]) (.getElementById js/document "widget11"))</script><div id="widget12"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :table]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :tr]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]]]]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]]]]]}]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :tr]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]]]]]}] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :node]] {^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :name]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :td]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :props]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]], ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :children]] [[^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :primitive]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :number]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 4]]]]]}]]}]]}]"}]) (.getElementById js/document "widget12"))</script><div>## Tables
</div><div>Tables are interesting because one can imagine users with data in many different shapes;
vectors of vectors, vectors of maps, Tablecloth datasets, or maybe something else.
</div><div id="widget15"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} {:headers [], :row-vectors []}]]"}]) (.getElementById js/document "widget15"))</script><div id="widget16"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} {:row-maps [], :headers []}]]"}]) (.getElementById js/document "widget16"))</script><div id="widget17"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/table\"]] [:portal.viewer/inspector ^#:kind{:table true} [[1 2] [3 4]]]]"}]) (.getElementById js/document "widget17"))</script><div>It would be convenient to allow users several options for table inputs,
and some transformations to standardize them for downstream tools.
Perhaps this can be achieved with a shorthand helper?
</div><div id="widget19"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "(^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector tabulate]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector values]])"}]) (.getElementById js/document "widget19"))</script><div id="widget20"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "(^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector tabulate]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector headers]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector values]])"}]) (.getElementById js/document "widget20"))</script><div>Possibly a multimethod (with a row multimethod as well).
</div><div>Tools should be encouraged to accept a standardized data shape defined by a schema:
</div><div id="widget23"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name Table, :ns #object[clojure.lang.Namespace 0x4a9b9e41 \"kindly.grammars\"]} #'kindly.grammars/Table]]"}]) (.getElementById js/document "widget23"))</script><div>## Plots
</div><div>Plots have the richest grammar.
Two popular grammars for plotting are Vega and ggplot2.
</div><div id="widget26"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/vega\"]] [:portal.viewer/inspector ^#:kind{:vega true} {}]]"}]) (.getElementById js/document "widget26"))</script><div>Vega has json-schemas available which are comprehensive.
There is not yet a way to create Malli schemas from Vega json-schema.
We could use a json-schema library instead,
or improve Malli schema conversion.
</div><div>## Images
</div><div>No grammar is necessary for images.
</div><div>Images can be specified using Markdown syntax:

    ![a heart](claykind.png)

![a heart](../../../claykind.png)

Managing the path to images can be challenging for users.
</div><div>It is nice to be able to use "send form to Portal" or similar, can this be done with Markdown?
</div><div id="widget32"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/buffered-image\"]] [:portal.viewer/inspector #object[java.awt.image.BufferedImage 0x21cb8641 \"BufferedImage@21cb8641: type = 6 ColorModel: #pixelBits = 32 numComponents = 4 color space = java.awt.color.ICC_ColorSpace@191e5127 transparency = 3 has alpha = true isAlphaPre = false ByteInterleavedRaster: width = 256 height = 256 #numDataElements 4 dataOff[0] = 3\"]]]"}]) (.getElementById js/document "widget32"))</script><div>Users may benefit from a shorthand helper function `(image "claykind.png")`.
</div><div>sometimes the filename will be calculated programmatically,
which would be teadious to achieve with markdown.
</div><div>## Reagent components
</div><div>A grammar is not possible for functions, or Reagent components.
</div><div>## Tablecloth datasets
</div><div>Tablecloth datasets are identifiable by their type.
</div><div>## Markdown
</div><div>Markdown comes in different flavours,
for example GitHub Markdown and Quarto (qmd).
Downstream tools may benefit from a hint as to which flavor should be used.
Users probably don't want to have to think too much about this though.
</div><div>Of particular interest is the display of mathematical equations,
which often require plugin support.
</div><div>$ f(x) = x^2 $
</div><div>Should render as an equation.
</div><div>Somewhat surprisingly, we cannot rely entirely on comments to represent Markdown.
We might need to construct Markdown programmatically.
</div><div id="widget45"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector \"## This... is... :Markdown\"]]"}]) (.getElementById js/document "widget45"))</script><div>## Data
</div><div>No grammar is necessary for primitives and collections.
</div><div id="widget48"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "{^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector :this]] #{^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector \"is\"]]}, ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector data]] [^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]]}"}]) (.getElementById js/document "widget48"))</script><div>One challenge is when the data is very large.
Ideally some preview would be available.
</div></body></html>