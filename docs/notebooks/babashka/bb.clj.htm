<!DOCTYPE html>
<html><head><script src="https://unpkg.com/react@18/umd/react.production.min.js" type="text/javascript"></script><script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.reagent.js" type="text/javascript"></script><script src="http://localhost:59822/main.js?59830789-0bfa-4d3f-a49c-14390e78312b" type="text/javascript"></script></head><body><script type="application/x-scittle">(ns main (:require [reagent.core :as r] [reagent.dom :as dom] [emmy-viewers.sci]))
(emmy-viewers.sci/install!)</script><div># Babashka notebooks
</div><div>Babashka is, by design, as close to Clojure as possible.
</div><div id="widget2"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name now, :ns ^{:doc \"This example converts any namespace in the `notebooks` directory\\n  into a markdown file in the `docs` directory.\\n  You could use this to publish a blog that works with markdown,\\n  or use Pandoc or Quarto to convert the markdown into HTML.\"} #object[clojure.lang.Namespace 0x30c11248 \"scicloj.clay.publish\"]} #'scicloj.clay.publish/now]]"}]) (.getElementById js/document "widget2"))</script><div id="widget3"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name LA-timezone, :ns ^{:doc \"This example converts any namespace in the `notebooks` directory\\n  into a markdown file in the `docs` directory.\\n  You could use this to publish a blog that works with markdown,\\n  or use Pandoc or Quarto to convert the markdown into HTML.\"} #object[clojure.lang.Namespace 0x30c11248 \"scicloj.clay.publish\"]} #'scicloj.clay.publish/LA-timezone]]"}]) (.getElementById js/document "widget3"))</script><div id="widget4"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name LA-time, :ns ^{:doc \"This example converts any namespace in the `notebooks` directory\\n  into a markdown file in the `docs` directory.\\n  You could use this to publish a blog that works with markdown,\\n  or use Pandoc or Quarto to convert the markdown into HTML.\"} #object[clojure.lang.Namespace 0x30c11248 \"scicloj.clay.publish\"]} #'scicloj.clay.publish/LA-time]]"}]) (.getElementById js/document "widget4"))</script><div id="widget5"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name pattern, :ns ^{:doc \"This example converts any namespace in the `notebooks` directory\\n  into a markdown file in the `docs` directory.\\n  You could use this to publish a blog that works with markdown,\\n  or use Pandoc or Quarto to convert the markdown into HTML.\"} #object[clojure.lang.Namespace 0x30c11248 \"scicloj.clay.publish\"]} #'scicloj.clay.publish/pattern]]"}]) (.getElementById js/document "widget5"))</script><div id="widget6"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]"}]) (.getElementById js/document "widget6"))</script><div>The notable differences are:
</div><div>* Code is evaluated with [Sci](https://github.com/babashka/SCI)
* Not all of Clojure is available
* Files start with a shell directive instead of a namespace
</div><div>Did you know that Clojure treats `#!` as a comment?
</div><div>So you can already create Babashka notebooks if you ignore the differences,
but this project (claykind) will detect Babashka and use Sci,
which will make it more directly compatible.
</div><div>Would it be interesting thing to try is running claykind from babashka?
What possibilities does that open up?
Faster command-line blog generation?
</div></body></html>