<!DOCTYPE html>
<html><head><script src="https://unpkg.com/react@18/umd/react.production.min.js" type="text/javascript"></script><script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.js" type="text/javascript"></script><script src="https://scicloj.github.io/scittle/js/scittle.reagent.js" type="text/javascript"></script><script src="http://localhost:59822/main.js?59830789-0bfa-4d3f-a49c-14390e78312b" type="text/javascript"></script></head><body><script type="application/x-scittle">(ns main (:require [reagent.core :as r] [reagent.dom :as dom] [emmy-viewers.sci]))
(emmy-viewers.sci/install!)</script><div id="widget0"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector nil]]"}]) (.getElementById js/document "widget0"))</script><div># section 1

 hello, welcome to my wonderful test notebook
</div><div id="widget2"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 6]]"}]) (.getElementById js/document "widget2"))</script><div id="widget3"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div [:p \"unimplemented kind\" [:code \":kind/var\"]] [:portal.viewer/inspector ^{:arglists ([x]), :line 1, :column 1, :file \"/private/var/folders/8r/y2d3thln6s3fyrl_s6vknb440000gn/T/form-init6391873883158530078.clj\", :name f, :ns #object[clojure.lang.Namespace 0x3b88802d \"test.basic\"]} #'test.basic/f]]"}]) (.getElementById js/document "widget3"))</script><div id="widget4"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 29]]"}]) (.getElementById js/document "widget4"))</script><div># section 2
</div><div>What if I told you

    That codeblocks can exist inside comments?

And that you can do HTML?
</div><div id="widget7"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "^{:kind/hiccup true, :portal.viewer/default :portal.viewer/hiccup} [:h1 \"Hello world\"]"}]) (.getElementById js/document "widget7"))</script><div id="widget8"></div><script type="application/x-scittle">(dom/render (fn [] [(fn [{:keys [edn-str]}] (let [api (js/portal.extensions.vs_code_notebook.activate)] [:div [:div {:ref (fn [el] (.renderOutputItem api (clj->js {:mime "x-application/edn", :text (fn [] edn-str)}) el))}]])) {:edn-str "[(^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 0]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 4]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 5]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 6]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 7]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 8]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 9]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 10]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 11]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 12]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 13]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 14]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 15]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 16]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 17]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 18]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 19]]) (^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 19]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 18]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 17]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 16]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 15]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 14]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 13]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 12]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 11]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 10]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 9]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 8]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 7]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 6]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 5]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 4]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 3]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 2]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 1]] ^#:portal.viewer{:default :portal.viewer/hiccup} [:div nil [:portal.viewer/inspector 0]])]"}]) (.getElementById js/document "widget8"))</script><div>We can add things that translate to the existing kindly specs...
But! Now I have this different thing; SVG images, tables that have double rows.
Pushing handling code out the display tools
The categories of features
</div><div>Notice that there is only whitespace between this comment and the previous one,
and that the whitespace was preserved in the markdown. Wonderful!
</div><div>Possible feature: Order of evaluation
present the last form first!
Just reverse the contexts.
Might want to annotate this in the namespace itself somehow,
perhaps metadata on the `ns` form?
And even on individual parts? Bringing them to the top or bottom or setting their position.

Here is a Markdown table

|  |  |  |
|--|--|--|
| "a" | "b" | "c" |
</div></body></html>